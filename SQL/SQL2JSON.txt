// Author: Joshua Palmer - pillarofire@gmail.com
//
// Purpose: Take a FM SQL query string as would be passed to 'ExecuteSQL' and convert it into JSON, in the form of [{row[0]},{row[1]},{row[N]}]
//  where {resultN} is of the form of {"<GetValue( fieldList ; 1 )>": "<row[N].value[0]>","<GetValue( fieldList ; 2 )>": "<row[N].value[1]>",
//  "<GetValue( fieldList ; M )>": "<row[N].value[M-1]>"} ; 
//  and fieldList is a return delimited list of key names corresponding to the row keynames in the query selection. 
//  Using wildcard field selectors is not recommended.
// 
// Dependancies:
//  BaseElements plugin :: BE_EvaluateJavaScript( $jsCode )
//
// Example 0:
//  SQL2JSON( "SELECT Id, Name FROM CONTACTS"; List( "id"; "name" ); "" )
//  => [{"id":1,"name":"John Doe"},{"id":2,"name":"Jane Doe"},{"id":3,"name":"Jack Blue"},{...}]
//
// Example 1:
//  SQL2JSON( "SELECT Id, Name FROM CONTACTS WHERE Name LIKE '%'+?+'%'"; "id¶name"; "Doe" )
//  => [{"id":1,"name":"John Doe"},{"id":2,"name":"Jane Doe"}]
//
// Version 1.0.0 : 2021:07:08 14:10:40 -0700 : Joshua Palmer
// Version 1.1.0 : 2025:07:29 13:35:58 -0700 : Joshua Palmer : Removed dependency on BaseElements plugin, replaced with native FileMaker JSON functions.
//
// Limitations: Max string length of FileMaker

Let([

/* Test Data: enable to test evaluate in the data viewer */
//query = "SELECT id,note FROM CONTACTS OFFSET " & Floor(Random*1000) & " ROWS FETCH FIRST 1000 ROWS ONLY"; fieldList = "id¶note"; sqlParams = "";

// Produces : "row[0].value[0]~~row[0].value[1]~~...row[0].value[n]|row[1].value[0]~~row[1].value[1]~~...row[1].value[n]|...row[m].value[0]~~<etc.>"
res = Case( IsEmpty(sqlParams);
	ExecuteSQL( query; "~~"; "|" );
	ExecuteSQL( query; "~~"; "|" ; sqlParams  )
);

// for each row, insert the fieldName before each row's value.

res = Substitute( res; "|"; "¶" );
rowCount = ValueCount( res );
fieldCount = ValueCount( fieldList );
res = While (
	[ i = 1 ; result="" ] ;			// ① initialise
	i <= rowCount;							// ② loop if condition is true
	[														// ③ each step
		rowValues = Substitute ( GetValue( res; i ); "~~"; "¶" );
		newRow = While (
			[ j = 1 ; row="" ] ;			// ① initialise
			j <= fieldCount;					// ② loop if condition is true
			[													// ③ each step
				fieldName = GetValue ( fieldList ; j );
				fieldValue = GetValue ( rowValues ; j );
				row = If( res = "?"; 
					"{\"__ERROR__\":\"Error in query.\"}" ; 
					JSONSetElement ( row ; fieldName ; fieldValue ; JSONString )
				);
				j = j + 1
			] ;
			row												// ④ final value
		);
		result = If( IsEmpty(result) ; newRow; result & "," & newRow );
		i = i + 1
	] ;
	If( JSONGetElement( result; "__ERROR__" )="Error in query."; 
		JSONGetElement( result ; ""); 
		"[" & result & "]"
	)														// ④ final value
);


f=""];

/* Testing; if the JSONGetElement returns an error then the parsing of the data is somehow bad
	which could be caused by bad data, or a bug in the json construction */
//JSONGetElement( res; Floor(Random*1000) )
res

)